#include <Servo.h>

// === Pin Definitions ===
// Motor A - Left
#define enA 11
#define in1 4
#define in2 12

// Motor B - Right
#define enB 5
#define in3 6
#define in4 7

// IR Sensors
#define L_S 2
#define R_S 3

// Ultrasonic Sensor
#define trigPin 8
#define echoPin 9

// Servo Motor
#define servoPin 10
Servo myServo;

// TCS3200 Color Sensor Pins
#define S0 A1
#define S1 A2
#define S2 A3
#define S3 A4
#define OUT A0
#define LED_CTRL 13

// === Variables ===
int redFreq = 0, greenFreq = 0, blueFreq = 0;
int distance = 0;

enum RobotState {
  FOLLOW_LINE,
  DETECTED_RED,
  DETECTED_BLUE,
  OBSTACLE_AVOIDANCE
};
RobotState currentState = FOLLOW_LINE;

void setup() {
  // Motor setup
  pinMode(enA, OUTPUT); pinMode(in1, OUTPUT); pinMode(in2, OUTPUT);
  pinMode(enB, OUTPUT); pinMode(in3, OUTPUT); pinMode(in4, OUTPUT);
  setMotorSpeed(80, 80);

  // Sensor setup
  pinMode(L_S, INPUT); pinMode(R_S, INPUT);
  pinMode(trigPin, OUTPUT); pinMode(echoPin, INPUT);
  myServo.attach(servoPin); myServo.write(90);

  pinMode(S0, OUTPUT); pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT); pinMode(S3, OUTPUT);
  pinMode(OUT, INPUT); pinMode(LED_CTRL, OUTPUT);

  digitalWrite(LED_CTRL, HIGH); // Turn on color sensor LED
  digitalWrite(S0, HIGH); digitalWrite(S1, LOW); // Set 20% scaling

  Serial.begin(9600);
  Serial.println("Robot Initialized");
}

void loop() {
  distance = getDistance();
  detectColor();

  // === State Determination ===
  if (distance > 0 && distance < 15) {
    currentState = OBSTACLE_AVOIDANCE;
  } else if (redFreq < greenFreq * 0.8 && redFreq < blueFreq * 0.8) {
    currentState = DETECTED_RED;
  } else if (blueFreq < redFreq * 0.8 && blueFreq < greenFreq * 0.8) {
    currentState = DETECTED_BLUE;
  } else {
    currentState = FOLLOW_LINE;
  }

  // === State Machine ===
  switch (currentState) {
    case OBSTACLE_AVOIDANCE:
      Serial.println("Obstacle Detected");
      avoidObstacle();
      break;

    case DETECTED_RED:
      Serial.println("Red Detected → Obstacle Avoidance");
      avoidObstacle();
      break;

    case DETECTED_BLUE:
      Serial.println("Blue Detected → Speed Boost");
      setMotorSpeed(120, 120);
      delay(3000);
      setMotorSpeed(80, 80);
      break;

    case FOLLOW_LINE:
      followLine();
      break;
  }

  delay(50); // Short delay for stability
}

// === Line Following Logic ===
void followLine() {
  int leftSensor = digitalRead(L_S);
  int rightSensor = digitalRead(R_S);

  if (leftSensor == LOW && rightSensor == LOW) {
    moveForward();
  } else if (leftSensor == LOW && rightSensor == HIGH) {
    turnLeft();
  } else if (leftSensor == HIGH && rightSensor == LOW) {
    turnRight();
  } else {
    stopMotors();
  }
}

// === Distance Measurement ===
int getDistance() {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 20000);
  if (duration == 0) return -1;
  return duration * 0.034 / 2;
}

// === Color Detection ===
void detectColor() {
  // RED
  digitalWrite(S2, LOW); digitalWrite(S3, LOW); delay(100);
  redFreq = pulseIn(OUT, LOW);

  // GREEN
  digitalWrite(S2, HIGH); digitalWrite(S3, HIGH); delay(100);
  greenFreq = pulseIn(OUT, LOW);

  // BLUE
  digitalWrite(S2, LOW); digitalWrite(S3, HIGH); delay(100);
  blueFreq = pulseIn(OUT, LOW);

  Serial.print("R: "); Serial.print(redFreq);
  Serial.print(" G: "); Serial.print(greenFreq);
  Serial.print(" B: "); Serial.println(blueFreq);
}

// === Movement Control ===
void moveForward() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);
}

void turnLeft() {
  digitalWrite(in1, LOW); digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);
}

void turnRight() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); digitalWrite(in4, HIGH);
}

void stopMotors() {
  digitalWrite(in1, LOW); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); digitalWrite(in4, LOW);
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
  analogWrite(enA, constrain(leftSpeed, 0, 255));
  analogWrite(enB, constrain(rightSpeed, 0, 255));
}

// === Obstacle Avoidance ===
void avoidObstacle() {
  reverseFor5cm();
  scanWithServo();

  setMotorSpeed(150, 150);
  sharpLeft(); delay(1200);

  setMotorSpeed(100, 100);
  moveForward(); delay(1300);

  setMotorSpeed(90, 90);
  sharpRight(); delay(700);

  setMotorSpeed(60, 60);
  moveForward();
  while (digitalRead(L_S) == HIGH && digitalRead(R_S) == HIGH) {
    // searching for black line
  }
  stopMotors();
  setMotorSpeed(90, 90); // Resume normal speed
}

// === Utility Actions ===
void reverseFor5cm() {
  digitalWrite(in1, LOW); digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW); digitalWrite(in4, HIGH);
  delay(650);
  stopMotors();
}

void scanWithServo() {
  myServo.write(45); delay(400);
  myServo.write(135); delay(400);
  myServo.write(90); delay(200);
}

void sharpLeft() {
  digitalWrite(in1, LOW); digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH); digitalWrite(in4, LOW);
}

void sharpRight() {
  digitalWrite(in1, HIGH); digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); digitalWrite(in4, HIGH);
}
